Yuxuan Huang
Lab9 prelab

(1.1) What is “stack smashing”?
      The implementation in C that is possible to corrupt the execution stack by writing
past the end of an array declared auto in a routine. This can cause return from the routine to jump to a random address. 

(1.2) What is it that makes stack smashing possible?
      The stack has limited space and it receives more data than it 
can hold. 

(1.3) Describe what it means to disassemble machine code. 
      To translates machine language into assembly language. It’s inverse operation to assemble assembly code. 

(1.4) In the mips machine, the disassembler disassemble the machine 
code into mips assembly language. In the paper, its probably another assembly language. 

(1.5) Place the code with are trying to execute in the buffer we are overflowing, and overwrite the return address so it points
back into the buffer.


(2.1) ebp is the stack base pointer register. It holds the base address of the stack.
Same as $sp in MIPS

(2.2) low address
         local variables
         the old base pointer
         the return address
         parameters to the function
      high address

(2.3) Essential parameters or other local variables that are supposed to be used before the function returns get overwritten. 